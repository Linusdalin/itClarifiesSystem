package overviewExport;

import risk.*;
import contractManagement.*;
import classification.*;
import userManagement.*;
import project.*;
import versioning.*;
import actions.*;
import overviewExport.*;
import module.*;
import search.*;
import crossReference.*;
import reclassification.*;
import dataRepresentation.*;
import databaseLayer.DBKeyInterface;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import log.PukkaLogger;
import pukkaBO.exceptions.BackOfficeException;
import pukkaBO.condition.*;
import pukkaBO.database.*;

import pukkaBO.acs.*;

/********************************************************
 *
 *    ExtractionState - Data Table
 *    Automatically generated file by GenerateTable.java
 *
 *
 */

public class ExtractionStateTable extends ConstantTable implements DataTableInterface{

    private static final String TITLE = "Extraction State";
    public static final String TABLE = "ExtractionState";
    private static final String DESCRIPTION = "Possible states of the extraction status";

    public enum Columns {Id, Name, Comment, }

    private static final ColumnStructureInterface[] DATA = new ColumnStructureInterface[] {

            new IntColumn("Id", DataColumn.narrowColumn),
            new StringColumn("Name", DataColumn.noFormatting),
            new TextColumn("Comment", DataColumn.wideColumn),
    };

    private static final ExtractionState associatedObject = new ExtractionState();
    public ExtractionStateTable(){

        init(DATA, associatedObject, TABLE, TITLE, DESCRIPTION, Values);
        nameColumn = 2;
    }

    public static final List<DataObjectInterface> Values = new ArrayList<DataObjectInterface>() {{

          add(new ExtractionState(10, "Empty", "No extraction generated"));
          add(new ExtractionState(20, "Generating", "Generating Overview"));
          add(new ExtractionState(30, "Dirty", "New Generation required"));
          add(new ExtractionState(40, "Ready", "Ready to download"));
          add(new ExtractionState(50, "Failed", "Generation failed"));



    }};

    public ExtractionState getValue(int id){
        
        return (ExtractionState)super.getConstantValue( id );
    }
    /* Code below this point will not be replaced when regenerating the file*/

    /*__endAutoGenerated*/



}
