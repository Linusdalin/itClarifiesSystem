package crossReference;

import risk.*;
import contractManagement.*;
import classification.*;
import userManagement.*;
import versioning.*;
import actions.*;
import overviewExport.*;
import module.*;
import search.*;
import crossReference.*;
import reclassification.*;
import dataRepresentation.*;
import databaseLayer.DBKeyInterface;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import log.PukkaLogger;
import pukkaBO.exceptions.BackOfficeException;
import pukkaBO.condition.*;
import pukkaBO.database.*;

import pukkaBO.acs.*;

/********************************************************
 *
 *    Reference - Data Table
 *    Automatically generated file by GenerateTable.java
 *
 *
 */

public class ReferenceTable extends DataTable implements DataTableInterface{

    private static final String TITLE = "Reference";
    public static final String TABLE = "Reference";
    private static final String DESCRIPTION = "A reference from a fragment to a clause";

    public enum Columns {Name, From, To, Version, Project, Type, Pattern, PatternPos, Creator, }

    private static final ColumnStructureInterface[] DATA = new ColumnStructureInterface[] {

            new StringColumn("Name", DataColumn.noFormatting),
            new ReferenceColumn("From", DataColumn.noFormatting, new TableReference("ContractFragment", "Name")),
            new ReferenceColumn("To", DataColumn.noFormatting, new TableReference("ContractFragment", "Name")),
            new ReferenceColumn("Version", DataColumn.noFormatting, new TableReference("ContractVersionInstance", "Version")),
            new ReferenceColumn("Project", DataColumn.noFormatting, new TableReference("Project", "Name")),
            new ConstantColumn("Type", DataColumn.narrowColumn, new TableReference("ReferenceType", "Name")),
            new TextColumn("Pattern", DataColumn.noFormatting),
            new IntColumn("PatternPos", DataColumn.noFormatting),
            new ReferenceColumn("Creator", DataColumn.noFormatting, new TableReference("PortalUser", "Name")),
    };

    private static final Reference associatedObject = new Reference();
    public ReferenceTable(){

        init(DATA, associatedObject, TABLE, TITLE, DESCRIPTION, DefaultValues, TestValues);
         /* No name column set for table. Using default ( 1 ) */
         // Not set as external
        // Not a constant table
    }

    public ReferenceTable(ConditionInterface condition){

        this();
        try{

            values = load(condition);
        }
        catch(BackOfficeException e){

            System.out.println("Error loading table values " + e.narration);
        }

    }
    private static final String[][] DefaultValues = {




    };
    private static final String[][] TestValues = {

          {"as listed below", "first fragment", "Definition fragment", "Cannon v1.0", "Demo", "Implicit", "Pricelist", "0", "itClarifies", "system"},



    };

    @Override
    public void clearConstantCache(){

        Reference.clearConstantCache();
    }

    /* Code below this point will not be replaced when regenerating the file*/

    /*__endAutoGenerated*/




}
