package reclassification;

import risk.*;
import contractManagement.*;
import classification.*;
import userManagement.*;
import project.*;
import versioning.*;
import actions.*;
import overviewExport.*;
import module.*;
import search.*;
import crossReference.*;
import reclassification.*;
import dataRepresentation.*;
import databaseLayer.DBKeyInterface;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import log.PukkaLogger;
import pukkaBO.exceptions.BackOfficeException;
import pukkaBO.condition.*;
import pukkaBO.database.*;

import pukkaBO.acs.*;

/********************************************************
 *
 *    Reannotation - Data Table
 *    Automatically generated file by GenerateTable.java
 *
 *
 */

public class ReannotationTable extends DataTable implements DataTableInterface{

    private static final String TITLE = "Re-annotation Log";
    public static final String TABLE = "Reannotation";
    private static final String DESCRIPTION = "Annotations that are manually added";

    public enum Columns {Text, Add, Date, Project, Document, FragmentNo, Fragment, Pattern, PatternPos, User, Closed, }

    private static final ColumnStructureInterface[] DATA = new ColumnStructureInterface[] {

            new StringColumn("Text", DataColumn.noFormatting),
            new BoolColumn("Add", DataColumn.narrowColumn),
            new DateColumn("Date", DataColumn.noFormatting),
            new StringColumn("Project", DataColumn.noFormatting),
            new StringColumn("Document", DataColumn.noFormatting),
            new IntColumn("FragmentNo", DataColumn.noFormatting),
            new BlobColumn("Fragment", DataColumn.noFormatting),
            new TextColumn("Pattern", DataColumn.noFormatting),
            new IntColumn("PatternPos", DataColumn.noFormatting),
            new StringColumn("User", DataColumn.noFormatting),
            new BoolColumn("Closed", DataColumn.narrowColumn),
    };

    private static final Reannotation associatedObject = new Reannotation();
    public ReannotationTable(){

        init(DATA, associatedObject, TABLE, TITLE, DESCRIPTION, DefaultValues, TestValues);
         /* No name column set for table. Using default ( 1 ) */
         // Not set as external
        // Not a constant table
    }

    public ReannotationTable(ConditionInterface condition){

        this();
        try{

            values = load(condition);
        }
        catch(BackOfficeException e){

            System.out.println("Error loading table values " + e.narration);
        }

    }
    private static final String[][] DefaultValues = {




    };
    private static final String[][] TestValues = {




    };

    @Override
    public void clearConstantCache(){

        Reannotation.clearConstantCache();
    }

    /* Code below this point will not be replaced when regenerating the file*/

    /*__endAutoGenerated*/



}
