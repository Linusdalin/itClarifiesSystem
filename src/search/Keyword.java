package search;

import risk.*;
import contractManagement.*;
import classification.*;
import userManagement.*;
import versioning.*;
import actions.*;
import search.*;
import crossReference.*;
import dataRepresentation.*;
import databaseLayer.DBKeyInterface;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import log.PukkaLogger;
import pukkaBO.exceptions.BackOfficeException;
import pukkaBO.condition.*;
import pukkaBO.database.*;

import pukkaBO.acs.*;

/********************************************************
 *
 *    Keyword - Data Object
 *    Automatically generated file by GenerateTable.java
 *
 *
 */

public class Keyword extends DataObject implements DataObjectInterface{



    private static final DataTableInterface TABLE = (DataTableInterface) new KeywordTable();

    public Keyword(){

        super();

        if(table == null)
            table = TABLE;
    }

    public Keyword(String keyword, DataObjectInterface version, DataObjectInterface document, DataObjectInterface project) throws BackOfficeException{

        this(keyword, version.getKey(), document.getKey(), project.getKey());
    }


    public Keyword(String keyword, DBKeyInterface version, DBKeyInterface document, DBKeyInterface project){

        this();
        try{
           ColumnStructureInterface[] columns = getColumnFromTable();


           data = new ColumnDataInterface[columns.length];

           data[0] = new StringData(keyword);
           data[1] = new ReferenceData(version, columns[1].getTableReference());
           data[2] = new ReferenceData(document, columns[2].getTableReference());
           data[3] = new ReferenceData(project, columns[3].getTableReference());

           exists = true;
        }catch(BackOfficeException e){
            PukkaLogger.log(PukkaLogger.Level.FATAL, "Could not create object.");
            exists = false;
        }


    }
    /*********************************************************************''
     *
     *          Load from database
     *
     * @param condition - the SQL condition for selecting ONE UNIQUE object
     */

    public Keyword(ConditionInterface condition){

        this();

        try{
            exists = load(condition);

        }catch(BackOfficeException e){

            System.out.println("Error loading object from database" + e.narration);
            e.printStackTrace();
        }

    }

    public DataObjectInterface createNew(ColumnDataInterface[] data ) throws BackOfficeException {

        Keyword o = new Keyword();
        o.data = data;
        o.exists = true;
        return o;
    }

    public String getKeyword(){

        StringData data = (StringData) this.data[0];
        return data.getStringValue();
    }

    public void setKeyword(String keyword){

        StringData data = (StringData) this.data[0];
        data.setStringValue(keyword);
    }



    public DBKeyInterface getVersionId(){

        ReferenceData data = (ReferenceData)this.data[1];
        return data.value;
    }

    public ContractVersionInstance getVersion(){

        ReferenceData data = (ReferenceData)this.data[1];
        return new ContractVersionInstance(new LookupByKey(data.value));
    }

    public void setVersion(DBKeyInterface version){

        ReferenceData data = (ReferenceData)this.data[1];
        data.value = version;
    }



    public DBKeyInterface getDocumentId(){

        ReferenceData data = (ReferenceData)this.data[2];
        return data.value;
    }

    public Contract getDocument(){

        ReferenceData data = (ReferenceData)this.data[2];
        return new Contract(new LookupByKey(data.value));
    }

    public void setDocument(DBKeyInterface document){

        ReferenceData data = (ReferenceData)this.data[2];
        data.value = document;
    }



    public DBKeyInterface getProjectId(){

        ReferenceData data = (ReferenceData)this.data[3];
        return data.value;
    }

    public contractManagement.Project getProject(){

        ReferenceData data = (ReferenceData)this.data[3];
        return new contractManagement.Project(new LookupByKey(data.value));
    }

    public void setProject(DBKeyInterface project){

        ReferenceData data = (ReferenceData)this.data[3];
        data.value = project;
    }




    public static void clearConstantCache(){

        //  Clear all cache when the application is uploaded.

    }

    /* Code below this point will not be replaced when regenerating the file*/

    /*__endAutoGenerated*/



}
